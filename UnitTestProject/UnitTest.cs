using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using people_search;
using System.Collections.Generic;
using System.Drawing;
using System.IO;

namespace UnitTestProject
{
    [TestClass]
    public class UnitTest
    {
        [TestMethod]
        public void test_searching_ukr()
        {
            //arrange
            List<Person> actual_person;
            Person expected_person = new Person();
            expected_person.id = "48280191";
            expected_person.ovd = "ВІТОВСЬКЕ ВІДДІЛЕННЯ ПОЛІЦІЇ КОРАБЕЛЬНОГО ВІДДІЛУ ГУНП В МИКОЛАЇВСЬКІЙ ОБЛАСТІ";
            expected_person.category = "БЕЗВІСНО ЗНИКЛИЙ ";
            expected_person.first_name_u = "ПАЛІЙЧУК";
            expected_person.last_name_u = "НАТАЛІЯ";
            expected_person.middle_name_u = "ВОЛОДИМИРІВНА";
            expected_person.first_name_r = "ПАЛИЙЧУК";
            expected_person.last_name_r = "НАТАЛЬЯ";
            expected_person.middle_name_r = "ВЛАДИМИРОВНА";
            expected_person.first_name_e = "PALIICHUK";
            expected_person.last_name_e = "NATALIYA";
            expected_person.middle_name_e = "VOLODYMYRIVNA";
            expected_person.birth_date = Convert.ToDateTime("1978-10-02T00:00:00");
            expected_person.sex = "ЖІНОЧА";
            expected_person.lost_date = Convert.ToDateTime("1997-08-03T00:00:00");
            expected_person.lost_place = "МИКОЛАЇВСЬКА, ВІТОВСЬКИЙ, КАРАВЕЛОВЕ";
            expected_person.article_crim = "СТ.115 Ч.1";
            expected_person.restraint = ", ";
            expected_person.contact = "0512531200, 0512531395";
            expected_person.photoid = "303382054";
            //act
            actual_person = Operations.searching_ukr("Палійчук".ToUpper(), "Наталія".ToUpper(), "Володимирівна".ToUpper(), "..\\..\\..\\people_search\\database.json");
            //assert
            Assert.AreEqual(expected_person.id, actual_person[0].id);
            Assert.AreEqual(expected_person.ovd, actual_person[0].ovd);
            Assert.AreEqual(expected_person.category, actual_person[0].category);
            Assert.AreEqual(expected_person.first_name_u, actual_person[0].first_name_u);
            Assert.AreEqual(expected_person.last_name_u, actual_person[0].last_name_u);
            Assert.AreEqual(expected_person.middle_name_u, actual_person[0].middle_name_u);
            Assert.AreEqual(expected_person.first_name_r, actual_person[0].first_name_r);
            Assert.AreEqual(expected_person.last_name_r, actual_person[0].last_name_r);
            Assert.AreEqual(expected_person.middle_name_r, actual_person[0].middle_name_r);
            Assert.AreEqual(expected_person.first_name_e, actual_person[0].first_name_e);
            Assert.AreEqual(expected_person.last_name_e, actual_person[0].last_name_e);
            Assert.AreEqual(expected_person.middle_name_e, actual_person[0].middle_name_e);
            Assert.AreEqual(expected_person.birth_date, actual_person[0].birth_date);
            Assert.AreEqual(expected_person.sex, actual_person[0].sex);
            Assert.AreEqual(expected_person.lost_date, actual_person[0].lost_date);
            Assert.AreEqual(expected_person.lost_place, actual_person[0].lost_place);
            Assert.AreEqual(expected_person.article_crim, actual_person[0].article_crim);
            Assert.AreEqual(expected_person.restraint, actual_person[0].restraint);
            Assert.AreEqual(expected_person.contact, actual_person[0].contact);
            Assert.AreEqual(expected_person.photoid, actual_person[0].photoid);
        }
        [TestMethod]
        public void test_searching_rus()
        {
            //arrange
            List<Person> actual_person;
            Person expected_person = new Person();
            expected_person.id = "74280081";
            expected_person.ovd = "ЧЕРНІГІВСЬКИЙ ВІДДІЛ ПОЛІЦІЇ ГУНП В ЧЕРНІГІВСЬКІЙ ОБЛАСТІ.";
            expected_person.category = "БЕЗВІСНО ЗНИКЛИЙ ";
            expected_person.first_name_u = "ЗАЙЦЕВ";
            expected_person.last_name_u = "СЕРГІЙ";
            expected_person.middle_name_u = "БОРИСОВИЧ";
            expected_person.first_name_r = "ЗАЙЦЕВ";
            expected_person.last_name_r = "СЕРГЕЙ";
            expected_person.middle_name_r = "БОРИСОВИЧ";
            expected_person.first_name_e = "ZAITSEV";
            expected_person.last_name_e = "SERHII";
            expected_person.middle_name_e = "BORYSOVYCH";
            expected_person.birth_date = Convert.ToDateTime("1970-02-23T00:00:00");
            expected_person.sex = "ЧОЛОВІЧА";
            expected_person.lost_date = Convert.ToDateTime("2003-09-06T00:00:00");
            expected_person.lost_place = "ЧЕРНІГІВСЬКА, ЧЕРНІГІВ";
            expected_person.article_crim = "СТ.115 Ч.1";
            expected_person.restraint = ", ";
            expected_person.contact = "ТЕЛ.ДЧ ЧЕРНИГОВСКОГО ОП:(0462)619-911;ТЕЛ.ДЧ ГУНП:(0462)619-001.";
            expected_person.photoid = "302806653";
            //act
            actual_person = Operations.searching_rus("Зайцев".ToUpper(), "Сергей".ToUpper(), "Борисович".ToUpper(), "..\\..\\..\\people_search\\database.json");
            //assert
            Assert.AreEqual(expected_person.id, actual_person[0].id);
            Assert.AreEqual(expected_person.ovd, actual_person[0].ovd);
            Assert.AreEqual(expected_person.category, actual_person[0].category);
            Assert.AreEqual(expected_person.first_name_u, actual_person[0].first_name_u);
            Assert.AreEqual(expected_person.last_name_u, actual_person[0].last_name_u);
            Assert.AreEqual(expected_person.middle_name_u, actual_person[0].middle_name_u);
            Assert.AreEqual(expected_person.first_name_r, actual_person[0].first_name_r);
            Assert.AreEqual(expected_person.last_name_r, actual_person[0].last_name_r);
            Assert.AreEqual(expected_person.middle_name_r, actual_person[0].middle_name_r);
            Assert.AreEqual(expected_person.first_name_e, actual_person[0].first_name_e);
            Assert.AreEqual(expected_person.last_name_e, actual_person[0].last_name_e);
            Assert.AreEqual(expected_person.middle_name_e, actual_person[0].middle_name_e);
            Assert.AreEqual(expected_person.birth_date, actual_person[0].birth_date);
            Assert.AreEqual(expected_person.sex, actual_person[0].sex);
            Assert.AreEqual(expected_person.lost_date, actual_person[0].lost_date);
            Assert.AreEqual(expected_person.lost_place, actual_person[0].lost_place);
            Assert.AreEqual(expected_person.article_crim, actual_person[0].article_crim);
            Assert.AreEqual(expected_person.restraint, actual_person[0].restraint);
            Assert.AreEqual(expected_person.contact, actual_person[0].contact);
            Assert.AreEqual(expected_person.photoid, actual_person[0].photoid);
        }
        [TestMethod]
        public void test_searching_eng()
        {
            //arrange
            List<Person> actual_person;
            Person expected_person = new Person();
            expected_person.id = "63280934";
            expected_person.ovd = "ХАРКІВСЬКИЙ ВІДДІЛ ПОЛІЦІЇ ГУНП В ХАРКІВСЬКІЙ ОБЛАСТІ";
            expected_person.category = "БЕЗВІСНО ЗНИКЛИЙ ";
            expected_person.first_name_u = "КУЗНЕЦОВ";
            expected_person.last_name_u = "МИХАЙЛО";
            expected_person.middle_name_u = "АНДРІЙОВИЧ";
            expected_person.first_name_r = "КУЗНЕЦОВ";
            expected_person.last_name_r = "МИХАИЛ";
            expected_person.middle_name_r = "АНДРЕЕВИЧ";
            expected_person.first_name_e = "KUZNETSOV";
            expected_person.last_name_e = "MYKHAILO";
            expected_person.middle_name_e = "ANDRIIOVYCH";
            expected_person.birth_date = Convert.ToDateTime("1949-07-06T00:00:00");
            expected_person.sex = "ЧОЛОВІЧА";
            expected_person.lost_date = Convert.ToDateTime("1992-05-13T00:00:00");
            expected_person.lost_place = "ХАРЬКОВСКАЯ, ХАРЬКОВСКИЙ, ВЫСОКИЙ";
            expected_person.article_crim = "СТ.120 Ч.1";
            expected_person.restraint = "НЕ ЗАСТОСОВУВАВСЯ, ";
            expected_person.contact = "тел. 0577059300";
            expected_person.photoid = "302196588";
            //act
            actual_person = Operations.searching_eng("Kuznetsov".ToUpper(), "Mykhailo".ToUpper(), "Andriiovych".ToUpper(), "..\\..\\..\\people_search\\database.json");
            //assert
            Assert.AreEqual(expected_person.id, actual_person[0].id);
            Assert.AreEqual(expected_person.ovd, actual_person[0].ovd);
            Assert.AreEqual(expected_person.category, actual_person[0].category);
            Assert.AreEqual(expected_person.first_name_u, actual_person[0].first_name_u);
            Assert.AreEqual(expected_person.last_name_u, actual_person[0].last_name_u);
            Assert.AreEqual(expected_person.middle_name_u, actual_person[0].middle_name_u);
            Assert.AreEqual(expected_person.first_name_r, actual_person[0].first_name_r);
            Assert.AreEqual(expected_person.last_name_r, actual_person[0].last_name_r);
            Assert.AreEqual(expected_person.middle_name_r, actual_person[0].middle_name_r);
            Assert.AreEqual(expected_person.first_name_e, actual_person[0].first_name_e);
            Assert.AreEqual(expected_person.last_name_e, actual_person[0].last_name_e);
            Assert.AreEqual(expected_person.middle_name_e, actual_person[0].middle_name_e);
            Assert.AreEqual(expected_person.birth_date, actual_person[0].birth_date);
            Assert.AreEqual(expected_person.sex, actual_person[0].sex);
            Assert.AreEqual(expected_person.lost_date, actual_person[0].lost_date);
            Assert.AreEqual(expected_person.lost_place, actual_person[0].lost_place);
            Assert.AreEqual(expected_person.article_crim, actual_person[0].article_crim);
            Assert.AreEqual(expected_person.restraint, actual_person[0].restraint);
            Assert.AreEqual(expected_person.contact, actual_person[0].contact);
            Assert.AreEqual(expected_person.photoid, actual_person[0].photoid);
        }
        [TestMethod]
        public void test_image()
        {
            //arrange
            Image actual_image;
            string actual, expected;
            expected = "";
            //act
            actual_image = Operations.person_photo("43825100", "..\\..\\..\\people_search\\database_photo1.json", "..\\..\\..\\people_search\\database_photo2.json");
            MemoryStream ms = new MemoryStream();
            actual_image.Save(ms, actual_image.RawFormat);
            byte[] image_bytes = ms.ToArray();
            actual = Convert.ToBase64String(image_bytes);
            //assert
            Assert.AreEqual(expected, actual);
        }
    }
}
